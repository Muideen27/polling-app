---
description: Rules and guidelines for the Polling App (Next.js + Supabase)
globs:
  - "**/*"
alwaysApply: true
---

## Technology Stack
- Language: TypeScript
- Framework: Next.js (App Router)
- Database & Auth: Supabase
- Styling: Tailwind CSS + shadcn/ui
- Forms: react-hook-form + zod
- State: Prefer Server Components; use client state only where needed
- QR Codes: qrcode.react

## Folder Structure
- Routes: `src/app/.../page.tsx`
- Components: `src/components/*`
- shadcn/ui: `src/components/ui/*`
- Lib & actions: `src/lib/*`  
  - Supabase clients: `supabase-server.ts`, `supabase-browser.ts`
  - Server Actions: `src/lib/actions/*`

## Core Rules
1. **Forms → Server Actions**
   - Do not fetch to `/api/*` for mutations. Use `action={serverAction}`.
2. **Data Fetching → Server Components**
   - Never use `useEffect` to fetch in a page. Fetch via Supabase in a Server Component.
3. **Supabase**
   - Use `@/lib/supabase-server` for server calls.
   - Use `@/lib/supabase-browser` only for client auth/session.
   - Never hardcode secrets; always load from `.env.local`.
4. **UI**
   - Use shadcn/ui components (`Button`, `Card`, `Input`, `Label`) for forms.
   - Accessible, minimal styling.
5. **Naming**
   - Components: PascalCase (`PollForm.tsx`).
   - Functions/utilities: camelCase (`submitVote.ts`).
6. **Commits**
   - Use semantic prefixes: `feat:`, `fix:`, `chore:`, `docs:`, etc.

## Data Model
- polls(id, owner, question, created_at)
- poll_options(id, poll_id, label, idx)
- votes(id, poll_id, option_id, voter_fingerprint, created_at)

## Verification Checklist
Before finishing a task, confirm:
- ✅ Uses App Router + Server Components for fetching
- ✅ Uses Server Actions for mutations
- ✅ Uses Supabase for DB/auth
- ✅ Uses shadcn/ui for UI
- ✅ Secrets only in `.env.local`
